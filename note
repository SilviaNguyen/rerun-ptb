async function executeSnapshot() {
    if (!stream || !video || video.readyState < video.HAVE_ENOUGH_DATA) {
        console.error("Video stream not ready for snapshot.");
        return;
    }
    if (flash) { flash.style.opacity = '0.9'; setTimeout(() => { flash.style.opacity = '0'; }, 120); }

    const originalVideoStyleFilter = video.style.filter;
    video.style.filter = 'none';

    mainCtx.clearRect(0, 0, mainCanvas.width, mainCanvas.height);
    mainCtx.drawImage(video, 0, 0, mainCanvas.width, mainCanvas.height);

    if (currentFilter === 'beauty') {
        const globalBeautyEffects = getFilterCSSText('beauty', false);
        if (globalBeautyEffects && globalBeautyEffects !== 'none') {
            const tempCopyCanvas = document.createElement('canvas');
            tempCopyCanvas.width = mainCanvas.width;
            tempCopyCanvas.height = mainCanvas.height;
            const tempCopyCtx = tempCopyCanvas.getContext('2d');
            tempCopyCtx.drawImage(mainCanvas, 0, 0);
            mainCtx.clearRect(0, 0, mainCanvas.width, mainCanvas.height);
            mainCtx.filter = globalBeautyEffects;
            mainCtx.drawImage(tempCopyCanvas, 0, 0);
            mainCtx.filter = 'none';
        }

        if (faceApiLoaded && faceLandmarkModelLoaded && faceapi.nets.tinyFaceDetector.params && faceapi.nets.faceLandmark68TinyNet.params) {
            try {
                const detections = await faceapi.detectAllFaces(mainCanvas, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks(true);

                if (detections && detections.length > 0) {
                    const skinSmoothBlurAmount = 'blur(3px)'; // Điều chỉnh độ mờ cho da
                    // const featureSharpness = 'none'; // Độ nét khi vẽ lại mắt, môi (có thể thử 'blur(0.5px)')

                    for (const detection of detections) {
                        const overallFaceBox = detection.detection.box; // Box của toàn bộ khuôn mặt
                        const landmarks = detection.landmarks;

                        // 1. Xác định và lưu trữ các vùng mắt, miệng gốc (chưa bị blur)
                        const leftEyePoints = landmarks.getLeftEye();
                        const rightEyePoints = landmarks.getRightEye();
                        const mouthPoints = landmarks.getMouth(); // Bao gồm cả môi trong và ngoài

                        const featurePadding = overallFaceBox.width * 0.02; // Padding nhỏ cho mắt, môi
                        const featureBoxesData = [];

                        if (leftEyePoints.length) {
                            featureBoxesData.push({ type: 'leftEye', points: leftEyePoints });
                        }
                        if (rightEyePoints.length) {
                            featureBoxesData.push({ type: 'rightEye', points: rightEyePoints });
                        }
                        if (mouthPoints.length) {
                            featureBoxesData.push({ type: 'mouth', points: mouthPoints });
                        }
                        
                        // Thêm cả vùng mũi nếu muốn giữ nét (tùy chọn)
                        const nosePoints = landmarks.getNose();
                        if (nosePoints.length) {
                            featureBoxesData.push({ type: 'nose', points: nosePoints });
                        }


                        const originalFeatureCanvases = featureBoxesData.map(data => {
                            const box = getBoundingBoxWithPadding(data.points, featurePadding, mainCanvas.width, mainCanvas.height);
                            const canvas = document.createElement('canvas');
                            canvas.width = box.width;
                            canvas.height = box.height;
                            const ctx = canvas.getContext('2d');
                            if (box.width > 0 && box.height > 0) {
                                ctx.drawImage(mainCanvas, box.x, box.y, box.width, box.height, 0, 0, box.width, box.height);
                            }
                            return { canvas, box };
                        });

                        // 2. Làm mờ toàn bộ vùng khuôn mặt
                        // Vùng blur có thể lớn hơn một chút so với `overallFaceBox` để hiệu ứng mềm mại hơn
                        const blurPadding = overallFaceBox.width * 0.15; // Padding cho vùng blur chính
                        const blurBox = getBoundingBoxWithPadding(
                            [
                                { x: overallFaceBox.x, y: overallFaceBox.y },
                                { x: overallFaceBox.x + overallFaceBox.width, y: overallFaceBox.y + overallFaceBox.height }
                            ], 
                            blurPadding, mainCanvas.width, mainCanvas.height
                        );
                        
                        if (blurBox.width > 0 && blurBox.height > 0) {
                            const tempFaceCanvas = document.createElement('canvas');
                            tempFaceCanvas.width = blurBox.width;
                            tempFaceCanvas.height = blurBox.height;
                            const tempFaceCtx = tempFaceCanvas.getContext('2d');
                            // Vẽ phần khuôn mặt (có thể đã có global effects) vào temp canvas
                            tempFaceCtx.drawImage(mainCanvas, blurBox.x, blurBox.y, blurBox.width, blurBox.height, 0, 0, blurBox.width, blurBox.height);
                            
                            mainCtx.filter = skinSmoothBlurAmount;
                            // Vẽ lại temp canvas đã blur lên mainCanvas
                            mainCtx.drawImage(tempFaceCanvas, 0, 0, blurBox.width, blurBox.height, blurBox.x, blurBox.y, blurBox.width, blurBox.height);
                            mainCtx.filter = 'none';
                        }

                        // 3. Vẽ lại các chi tiết mắt, miệng (đã lưu trữ) lên trên lớp đã làm mờ
                        // mainCtx.filter = featureSharpness; // Có thể áp dụng một chút filter nhẹ ở đây nếu muốn
                        for (const { canvas: featureCanvas, box: featureDrawBox } of originalFeatureCanvases) {
                            if (featureCanvas.width > 0 && featureCanvas.height > 0) {
                                mainCtx.drawImage(featureCanvas, 0, 0, featureCanvas.width, featureCanvas.height, featureDrawBox.x, featureDrawBox.y, featureDrawBox.width, featureDrawBox.height);
                            }
                        }
                        // mainCtx.filter = 'none'; // Đảm bảo tắt filter
                    }
                }
            } catch (error) {
                console.error("Lỗi nhận diện khuôn mặt hoặc landmarks:", error);
                // Nếu lỗi, có thể quay lại cách blur toàn bộ mặt đơn giản hơn (như code cũ)
                const fallbackBlur = getFilterCSSText('beauty', true); // Dùng CSS blur của preview
                if (fallbackBlur && fallbackBlur !== 'none') {
                    const tempCopy = document.createElement('canvas'); tempCopy.width=mainCanvas.width; tempCopy.height=mainCanvas.height;
                    const tempCtxCopy = tempCopy.getContext('2d'); tempCtxCopy.drawImage(mainCanvas,0,0);
                    mainCtx.clearRect(0,0,mainCanvas.width, mainCanvas.height);
                    mainCtx.filter = fallbackBlur; // Áp dụng toàn bộ filter preview
                    mainCtx.drawImage(tempCopy,0,0);
                    mainCtx.filter = 'none';
                }
            }
        } else {
            console.warn("FaceAPI models (detector hoặc landmarks) chưa sẵn sàng. Sử dụng beauty filter đơn giản hơn.");
            // Fallback: Áp dụng CSS blur của preview nếu models không tải được
            const fallbackBlur = getFilterCSSText('beauty', true);
            if (fallbackBlur && fallbackBlur !== 'none') {
                const tempCopy = document.createElement('canvas'); tempCopy.width=mainCanvas.width; tempCopy.height=mainCanvas.height;
                const tempCtxCopy = tempCopy.getContext('2d'); tempCtxCopy.drawImage(mainCanvas,0,0);
                mainCtx.clearRect(0,0,mainCanvas.width, mainCanvas.height);
                mainCtx.filter = fallbackBlur;
                mainCtx.drawImage(tempCopy,0,0);
                mainCtx.filter = 'none';
            }
        }
    } else if (currentFilter !== 'none') {
        // ... (xử lý các filter khác như cũ) ...
        const filterCSSToApply = getFilterCSSText(currentFilter, false);
        if (filterCSSToApply !== 'none') {
            const tempCopyCanvas = document.createElement('canvas');
            tempCopyCanvas.width = mainCanvas.width;
            tempCopyCanvas.height = mainCanvas.height;
            const tempCopyCtx = tempCopyCanvas.getContext('2d');
            tempCopyCtx.drawImage(mainCanvas, 0, 0); 
            mainCtx.clearRect(0, 0, mainCanvas.width, mainCanvas.height);
            mainCtx.filter = filterCSSToApply;
            mainCtx.drawImage(tempCopyCanvas, 0, 0); 
            mainCtx.filter = 'none';
        }
    }
    
    video.style.filter = originalVideoStyleFilter;
    const rawPhotoDataUrl = mainCanvas.toDataURL('image/jpeg', 0.95);

    
    if (inCollageMode && collagePhotos.length < currentCollageMode.totalPhotos) {
        collagePhotos.push(rawPhotoDataUrl);
        updateGrid5Preview();
        updateCollageStatusDisplay();
        toggleCollageCaptureUI(true);

        if (collagePhotos.length === currentCollageMode.totalPhotos) {
            generateAndDisplayCollage(); 
        }
    }
}

async function executeSnapshot() { // Make the function async
    if (!stream || !video || video.readyState < video.HAVE_ENOUGH_DATA) {
        console.error("Video stream not ready for snapshot.");
        return;
    }
    if (flash) { flash.style.opacity = '0.9'; setTimeout(() => { flash.style.opacity = '0'; }, 120); }

    const originalVideoStyleFilter = video.style.filter;
    video.style.filter = 'none'; // Temporarily remove live preview filter to get a clean frame

    mainCtx.clearRect(0, 0, mainCanvas.width, mainCanvas.height); // Clear previous frame
    mainCtx.drawImage(video, 0, 0, mainCanvas.width, mainCanvas.height); // Draw current video frame to canvas

    if (currentFilter === 'beauty') {
        // Apply global non-blur "beauty" effects (e.g., contrast, saturation)
        const globalBeautyEffects = getFilterCSSText('beauty', false); // e.g., "contrast(1.05) saturate(1.15)"

        if (globalBeautyEffects && globalBeautyEffects !== 'none') {
            // To apply filter to the already drawn image on mainCanvas, we need a temp canvas
            const tempCopyCanvas = document.createElement('canvas');
            tempCopyCanvas.width = mainCanvas.width;
            tempCopyCanvas.height = mainCanvas.height;
            const tempCopyCtx = tempCopyCanvas.getContext('2d');
            tempCopyCtx.drawImage(mainCanvas, 0, 0); // Copy current mainCanvas content

            mainCtx.clearRect(0, 0, mainCanvas.width, mainCanvas.height); // Clear mainCanvas
            mainCtx.filter = globalBeautyEffects;
            mainCtx.drawImage(tempCopyCanvas, 0, 0); // Draw back with global effects applied
            mainCtx.filter = 'none'; // Reset filter on mainCtx for subsequent drawing
        }

        // Perform face detection for skin smoothing if models are loaded
        if (faceApiLoaded && faceapi.nets.tinyFaceDetector.params) {
            try {
                const detections = await faceapi.detectAllFaces(mainCanvas, new faceapi.TinyFaceDetectorOptions());

                if (detections && detections.length > 0) {
                    const skinSmoothBlurAmount = 'blur(4px)'; // Adjust Gaussian blur amount for skin

                    for (const detection of detections) {
                        const box = detection.box; // The bounding box of the detected face

                        // To avoid overly sharp edges, expand the box slightly for blurring
                        const padding = box.width * 0.15; // 15% padding
                        const blurBox = {
                            x: Math.max(0, box.x - padding),
                            y: Math.max(0, box.y - padding),
                            width: box.width + 2 * padding,
                            height: box.height + 2 * padding
                        };
                        // Ensure blurBox does not exceed canvas boundaries
                        blurBox.width = Math.min(blurBox.width, mainCanvas.width - blurBox.x);
                        blurBox.height = Math.min(blurBox.height, mainCanvas.height - blurBox.y);


                        if (blurBox.width > 0 && blurBox.height > 0) {
                             // Create a temporary canvas to hold the face region to be blurred
                            const tempFaceCanvas = document.createElement('canvas');
                            tempFaceCanvas.width = blurBox.width;
                            tempFaceCanvas.height = blurBox.height;
                            const tempFaceCtx = tempFaceCanvas.getContext('2d');

                            // 1. Draw the face portion from the main canvas (which might have global effects) to the temp face canvas
                            tempFaceCtx.drawImage(mainCanvas, blurBox.x, blurBox.y, blurBox.width, blurBox.height, 0, 0, blurBox.width, blurBox.height);
                            
                            // 2. Apply the blur filter to the main canvas context
                            mainCtx.filter = skinSmoothBlurAmount;

                            // 3. Draw the captured face region (from tempFaceCanvas) back onto the main canvas.
                            // The blur filter on mainCtx will apply to this drawing operation.
                            mainCtx.drawImage(tempFaceCanvas, 0, 0, blurBox.width, blurBox.height, blurBox.x, blurBox.y, blurBox.width, blurBox.height);
                            
                            mainCtx.filter = 'none'; // Reset filter for the next face or drawing operation
                        }
                    }
                }
            } catch (error) {
                console.error("Lỗi nhận diện khuôn mặt:", error);
                // Optional: could fall back to a generic CSS blur for the whole image if face detection fails
            }
        } else if (!faceApiLoaded) {
            console.warn("FaceAPI models not loaded or failed to load. Skipping facial blur.");
            // If you want a fallback full-image blur when face-api is not ready:
            // const fallbackFullBlur = 'blur(0.7px)'; // Example fallback blur
            // const existingEffects = getFilterCSSText('beauty', false);
            // const tempFallbackCanvas = document.createElement('canvas');
            // tempFallbackCanvas.width = mainCanvas.width;
            // tempFallbackCanvas.height = mainCanvas.height;
            // const tempFallbackCtx = tempFallbackCanvas.getContext('2d');
            // tempFallbackCtx.drawImage(mainCanvas, 0, 0);
            // mainCtx.clearRect(0,0,mainCanvas.width,mainCanvas.height);
            // mainCtx.filter = `${fallbackFullBlur} ${existingEffects}`;
            // mainCtx.drawImage(tempFallbackCanvas, 0,0);
            // mainCtx.filter = 'none';
        }
    } else if (currentFilter !== 'none') { // For other filters like grayscale
        const filterCSSToApply = getFilterCSSText(currentFilter, false);
        if (filterCSSToApply !== 'none') {
            // Apply filter to the already drawn image using a temporary canvas
            const tempCopyCanvas = document.createElement('canvas');
            tempCopyCanvas.width = mainCanvas.width;
            tempCopyCanvas.height = mainCanvas.height;
            const tempCopyCtx = tempCopyCanvas.getContext('2d');
            tempCopyCtx.drawImage(mainCanvas, 0, 0); // Copy current mainCanvas content

            mainCtx.clearRect(0, 0, mainCanvas.width, mainCanvas.height); // Clear mainCanvas
            mainCtx.filter = filterCSSToApply;
            mainCtx.drawImage(tempCopyCanvas, 0, 0); // Draw filtered image back to mainCanvas
            mainCtx.filter = 'none'; // Reset filter on mainCtx
        }
    }
    
    // Restore the original video.style.filter for the live preview
    video.style.filter = originalVideoStyleFilter;
    
    const rawPhotoDataUrl = mainCanvas.toDataURL('image/jpeg', 0.95);

    if (inCollageMode && collagePhotos.length < currentCollageMode.totalPhotos) {
        collagePhotos.push(rawPhotoDataUrl);
        updateGrid5Preview();
        updateCollageStatusDisplay();
        toggleCollageCaptureUI(true);

        if (collagePhotos.length === currentCollageMode.totalPhotos) {
            generateAndDisplayCollage(); // This might need to be async if it uses await
        }
    }
}